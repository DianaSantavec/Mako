#!python


from ArgumentStack import * 
from mako.lib.schedule import * 
from mako.lib.ams import * 
from mako.lib.reporting import * 
from mako.lib.reporting.month import * 
from mako.lib.reporting.quarter import * 
from mako.lib.table import * 
from mako.desktop import * 

import sys
import os 
import colorama

stack = ArgumentStack()

def introduce(name):
    print("%s:" % name)
    print("_________________")

def list_projects(**kw):
    projects = db.downloadProjects()
    introduce("Projects")
    for project in projects:
        print(project.getName())

def add_project(name="", bg="", fg=""):
    introduce("Adding project %s" % name)
    projects = db.downloadProjects()
    projects.append(ScheduleProject(name, (255, 0, 0), (255,255,255)))
    db.uploadProjects(projects)

def delete_project(name="", **kw):
    introduce("Deleting project %s" % name)
    projects = db.downloadProjects()
    newprojects = [] 
    for p in projects:
        if p.getName() != name:
            newprojects.append(p)
    db.uploadProjects(newprojects)

def get_project_index(projects, name):
    k = -1 
    for i in range(len(projects)):
        if name == projects[i].getName():
            k = i
            break
    return k 

def get_subproject_index(subprojects, name):
    k = -1 
    for i in range(len(subprojects)):
        if name == subprojects[i].getName():
            k = i
            break
    return k 


def list_subprojects(project_name, **kw):
    introduce("List of subprojects for %s" % project_name)
    projects = db.downloadProjects()
    k = get_project_index(projects, project_name)
    if k == -1:
        print("Project %s not found" % project_name)
        return 
    for sp in projects[k].getSubprojects():
        print(sp.getName())

def add_subproject(project_name, name, **kw):
    introduce("Adding %s to %s" % (name, project_name))
    projects = db.downloadProjects()
    k = get_project_index(projects, project_name)
    if k == -1:
        print("Project %s not found" % project_name)
        return 
    projects[k].addSubproject(ScheduleSubproject(name))
    db.uploadProjects(projects)

def delete_subproject(project_name, name, **kw):
    introduce("Deleting %s from %s" % (name, project_name))
    projects = db.downloadProjects()
    i = get_project_index(projects, project_name)
    if i == -1:
        print("Project %s not found" % project_name)
    subprojects = projects[i].getSubprojects().copy()
    projects[i].deleteAllSubprojects()
    for sp in subprojects:
        if sp.getName() != name:
            projects[i].addSubproject(sp)
    db.uploadProjects(projects)

db = MakoDesktopDatabase("%s/.mako/db" % os.environ["HOME"])

stack.pushCommand("projects")
stack.assignAction(list_projects, "Lists all projects")
stack.pushCommand("list")
stack.assignAction(list_projects, "Lists all projects")
stack.pop()

stack.pushCommand("add")
stack.pushVariable("name")
stack.pushVariable("bg")
stack.pushVariable("fg")
stack.assignAction(add_project, "Add new projects. Colors are specified in hexadecimal manner like ffffff for white.")
stack.pop()
stack.pop()
stack.pop()
stack.pop()

stack.pushCommand("delete")
stack.pushVariable("name")
stack.pop()
stack.pop()

stack.pop()

stack.pushCommand("project")
stack.pushVariable("project_name")

stack.pushCommand("subprojects")
stack.assignAction(list_subprojects, "Lists all subprojects for a given project")
stack.pushCommand("list")
stack.assignAction(list_subprojects, "Lists all subprojects for a given project")
stack.pop()

stack.pushCommand("add")
stack.pushVariable("name")
stack.assignAction(add_subproject, "Adds new subproject into existing project")
stack.pop()
stack.pop()

stack.pushCommand("delete")
stack.pushVariable("name")
stack.assignAction(delete_subproject, "Deletes existing subproject")
stack.pop()
stack.pop()

stack.pop() # we do not use subprojects subcommands anymore 

stack.pushCommand("subproject")
stack.pushVariable("name")

def short_title(task):
    if len(task.getText()) > 30:
        return task.getText()[:30] + "..."
    return task.getText()
def list_tasks(project_name, name, **kw):
    introduce("Task list for %s -> %s" % (project_name, name))
    projects = db.downloadProjects()
    i = get_project_index(projects, project_name)
    if i == -1:
        print("Project not found")
        return 
    j = get_subproject_index(projects[i].getSubprojects(), name)
    if j == -1:
        print("Subproject not found")
        return 
    tasks = projects[i].getSubprojects()[j].getAllTasks()
    for t in tasks:
        text = short_title(t)
        color = colorama.Fore.RED
        if t.isDone():
            color = colorama.Fore.GREEN
        print("%s\t\t| %s | %s | %s %d \t %d%s" % (color, text, str(t.getDueDate()), " " * (40 - len(text)), t.getExpectedTime(), t.getSpentTime(), colorama.Style.RESET_ALL))


stack.pushCommand("tasks")
stack.assignAction(list_tasks,"List all tasks for given subproject")
stack.pushCommand("list")
stack.assignAction(list_tasks, "List all tasks for given subproject")
stack.pop()

def add_task(project_name, name, text, due, expected, **kw):
    if due == "current":
        due = datetime.datetime(datetime.datetime.now().year, datetime.datetime.now().month, 28)
    else:
        due = datetime.datetime.strptime(due, "%Y-%m-%d")
    expected = int(expected)
    introduce("Adding task to %s -> %s with description: %s, due date is %s and expected time is %d" % (project_name, name, text, datetime.datetime.strftime(due, "%Y-%m-%d"), expected))
    projects = db.downloadProjects()
    i = get_project_index(projects, project_name)
    if i == -1:
        print("Project not found")
        return
    j = get_subproject_index(projects[i].getSubprojects(), name)
    if j == -1:
        print("Subproject not found")
        return 
    projects[i].getSubprojects()[j].addTask(Task(text, expected, due=due))
    db.uploadProjects(projects)

stack.pushCommand("add")
stack.pushVariable("text")
stack.pushVariable("due")
stack.pushVariable("expected")
stack.assignAction(add_task, "Adds new task. Due date has to be specified in %Y-%m-%d format or 'current' if end of current month is needed to be. Expected time is in hours.")

stack.pop()
stack.pop()
stack.pop()
stack.pop()


def delete_task(project_name, name, text):
    introduce("Deleting task %s" % text)
    projects = db.downloadProjects()
    i = get_project_index(projects, project_name)
    if i == -1:
        print("Project not found")
        return
    j = get_subproject_index(projects[i].getSubprojects(), name)
    if j == -1:
        print("Subproject not found")
        return 
    tasks = projects[i].getSubprojects()[j].getAllTasks().copy()
    projects[i].getSubprojects()[j].deleteAllTasks()
    for task in tasks:
        if task.getText() != text:
            projects[i].getSubprojects()[j].addTask(task)
    db.uploadProjects(projects)

stack.pushCommand("delete")
stack.pushVariable("text")
stack.assignAction(delete_task, "Delete task with specified text")
stack.pop()
stack.pop()
stack.pop()

stack.pushCommand("task")
stack.pushVariable("text")

def get_task_by_text(tasks, text):
    candidates = [] 
    for task in tasks:
        if text.lower() in task.getText().lower():
            candidates.append(task)
    if len(candidates) == 0:
        print("No tasks to change")
        exit(0)
    if len(candidates) > 1:
        print("There's multiple tasks containing specified text, choose one:")
        i = 1
        for candidate in candidates:
            t = candidate 
            text = candidate.getText()
            color = colorama.Fore.RED
            if t.isDone():
                color = colorama.Fore.GREEN
            print("%d: %s\t\t| %s | %s | %s %d \t %d%s" % (i, color, text, str(t.getDueDate()), " " * (40 - len(text)), t.getExpectedTime(), t.getSpentTime(), colorama.Style.RESET_ALL))
        choice = int(input(">> "))
        while choice > len(candidates) or choice <= 0:
            print("Wrong number, try again")
            choice = int(input(">> "))
        return candidates[choice - 0]
    else:
        return candidates[0]


def mark_task_done(project_name, name, text, **kw):
    introduce("Marking task as done")
    projects = db.downloadProjects()
    i = get_project_index(projects, project_name)
    if i == -1:
        print("Project not found")
        return 
    j = get_subproject_index(projects[i].getSubprojects(), name)
    if j == -1:
        print("Subproject not found")
        return 
    get_task_by_text(projects[i].getSubprojects()[j].getAllTasks(), text).setDone()
    db.uploadProjects(projects)
stack.pushCommand("done")
stack.assignAction(mark_task_done, "Mark specified task as done")

stack.pop()

def increase_spent_time(project_name, name, text, dt, **kw):
    introduce("Changing spent time for a given task")
    dt = int(dt)
    projects = db.downloadProjects()
    i = get_project_index(projects, project_name)
    if i == -1:
        print("Project not found")
        return 
    j = get_subproject_index(projects[i].getSubprojects(), name)
    if j == -1:
        print("Subproject not found")
        return 
    get_task_by_text(projects[i].getSubprojects()[j].getAllTasks(), text).increaseSpentTime(dt)
    db.uploadProjects(projects)

stack.pushCommand("do")
stack.pushVariable("dt")
stack.assignAction(increase_spent_time, "Increase spent time for a given task")


stack.popAll()

def list_schedules(**kw):
    introduce("Listing all schedules")
    schedules = db.downloadSchedules()
    for schedule in schedules:
        d = schedule.getDate()
        print("Schedule created %s" % str(d))

stack.pushCommand("schedules")
stack.assignAction(list_schedules, "List all scedules")
stack.pushCommand("list")
stack.assignAction(list_schedules, "List all scedules")
stack.pop()


stack.popAll()
stack.pushCommand("schedule")

def add_schedule(**kw):
    introduce("Adding new schedule")
    schedules = db.downloadSchedules()
    s = Schedule(datetime.date.today())
    for condition in db.downloadDefaultConditions():
        print("Adding condition: %s" % condition.getDescription())
        s.addCondition(condition)
    schedules.append(s)
    db.uploadSchedules(schedules)

stack.pushCommand("new")
stack.assignAction(add_schedule, "Create new schedule")
stack.pop()

def show_tabular(table, column_size=10, has_header=True):
    if len(table) == 0:
        return 
    l = len(table[0])
    for row in table:
        if l != len(row):
            print("Table not alligned")
            return 
    i = 0
    for row in table:
        s = "|"
        for column in row:
            if len(column) > column_size:
                column = column[:column_size]
            s += " %s |" % (column + " "* (column_size - len(column)))
        print(s)
        i = i + 1
        if has_header and i == 1:
            print("-" * (1 + (3 + column_size) * len(row)))

def show_schedule(schedule):
    e = schedule.getEntries()
    table = [["Time", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]]
    for t in range(24):
        l = [str(t) + ":00"] 
        for day in range(1, 8):
            # now we search for entry, if exists 
            entry = None 
            for ee in e:
                if ee.getDay() == day and ee.getStart() <= t and t < ee.getStart() + ee.getDuration():
                    entry = ee 
            if entry == None:
                l.append("")
            else:
                l.append(entry.getProject().getName()[:3] + " - " + entry.getSubproject().getName())
        table.append(l)
    show_tabular(table)

def key_operator(entry):
    return entry.getDate()
def add_entry(day, time, duration, project_name, subproject_name, **kw):
    introduce("Adding entry to schedule")
    schedules = sorted(db.downloadSchedules(), key=key_operator)
    projects = db.downloadProjects()
    i = get_project_index(projects, project_name)
    if i == -1:
        print("Project not found")
        return 
    j = get_subproject_index(projects[i].getSubprojects(), subproject_name)
    if j == -1:
        print("Subproject not found")
        return 
    schedules[-1].addEntry(ScheduleEntry(projects[i], projects[i].getSubprojects()[j], int(day), int(time), int(duration)))
    errors = schedules[-1].check()
    if len(errors) > 0:
        print("Conditins not satisfied:")
        for error in errors:
            print(error[1].getDescription())
        return 
    db.uploadSchedules(schedules)
    show_schedule(schedules[-1])


stack.pushCommand("add")
stack.pushVariable("day")
stack.pushVariable("time")
stack.pushVariable("duration")
stack.pushVariable("project_name")
stack.pushVariable("subproject_name")
stack.assignAction(add_entry, "Add entry to lastly created schedule")
stack.pop()
stack.pop()
stack.pop()
stack.pop()
stack.pop()
stack.pop()

def print_schedule(**kw):
    introduce("Showing last schedule")
    schedules = sorted(db.downloadSchedules(), key=key_operator)
    show_schedule(schedules[-1])
    print("Conditions:")
    for cond in schedules[-1].getConditions():
        print(cond.getDescription())

stack.assignAction(print_schedule, "Show lastly created schedule")
stack.pushCommand("show")
stack.assignAction(print_schedule, "Show lastly created schedule")

stack.popAll()

def measure_all():
    introduce("Measuring all metric")
    actions = db.downloadMeasurementActions()
    ams = AMS()
    for action in actions:
        metric = action
        data = db.downloadMeasurementData(metric.getIdentifier())
        val = metric.measure()
        print("%s: %f" % (metric.getIdentifier(), val))
        data.append((datetime.date.today(), val))
        db.uploadMeasurementData(metric.getIdentifier(), data)
stack.pushCommand("measure")
stack.assignAction(measure_all, "Run measurement of all metrics")
stack.pop()

def list_metrics():
    introduce("Listing all metrics with last value")
    actions = db.downloadMeasurementActions()
    ams = AMS()
    for action in actions:
        data = db.downloadMeasurementData(action.getIdentifier())
        print("%s: %f | on %s" % (action.getIdentifier(), data[-1][1], data[-1][0]))
    
stack.pushCommand("metrics")
stack.assignAction(list_metrics, "Lists all metrics with last values")
stack.popAll()

def list_reports():
    introduce("Listing reports")
    reports = db.downloadReports()
    for report in reports:
        print("%s | %s" % (report.getName(), str(report.getDate())))
stack.pushCommand("reports")
stack.assignAction(list_reports, "List all reports")

stack.pushCommand("generate")

class MonthCLIReportView(ReportView):
    def show(self, report):
        if report.getField("expected_time") == "":
            return
        print("Total expected time for all tasks: %s" % report.getField("expected_time"))
        print("Tasks that have to be split")
        l = [["Project", "Subproject", "Task text"]]
        for task in report.getField("to_split"):
            l.append([task["project"], task["subproject"], task["task"]])
        show_tabular(l, 30)

def generate_month(month, year, **kw):
    introduce("Generating report")
    generator = MonthReportGenerator(db.downloadProjects())
    generator.setup(int(year), int(month))
    report = generator.generate()
    reports = db.downloadReports()
    reports.append(report)
    db.uploadReports(reports)
    view = MonthCLIReportView()
    view.show(report)

stack.pushCommand("monthly")
stack.pushVariable("year")
stack.pushVariable("month")
stack.assignAction(generate_month)
stack.pop()
stack.pop()
stack.pop()


class QuarterCLIReportView(ReportView):
    def show(self, report):
        if report.getField("subprojects") == "":
            return
        l = [["Project name", "Expected time", "Spent time"]]
        for project in report.getField("projects"):
            subprojects = report.getField("subprojects")[project]
            expected = 0
            real = 0
            for subproject in subprojects["subprojects"]:
                expected += int(subprojects["expected"][subproject])
                real += int(subprojects["real"][subproject])
            l.append([project, str(expected), str(real)])
        show_tabular(l, 30)

def generate_quarter(quarter, year, **kw):
    introduce("Generating report")
    generator = QuarterReportGenerator(db.downloadProjects())
    generator.setup(int(year), int(quarter), True, True)
    report = generator.generate()
    reports = db.downloadReports()
    reports.append(report)
    db.uploadReports(reports)
    view = QuarterCLIReportView()
    view.show(report)

stack.pushCommand("quarterly")
stack.pushVariable("year")
stack.pushVariable("quarter")
stack.assignAction(generate_quarter)
stack.pop()
stack.pop()
stack.pop()

stack.pop()

def show_report(report_name, **kw):
    introduce("Showing report %s" % report_name)
    reports = db.downloadReports()
    r = None
    for report in reports:
        if report.getName() == report_name:
            r = report 
            break
    if r == None:
        print("Report not found")
        return
    view = MonthCLIReportView()
    view.show(r)
    view = QuarterCLIReportView()
    view.show(r)

stack.pushCommand("show")
stack.pushVariable("report_name")
stack.assignAction(show_report, "Show report")

stack.popAll()
stack.pushCommand("tables")
def list_tables(**kw):
    introduce("Listing tables")
    tables = db.downloadTables()
    for table in tables:
        print(table.getName())
stack.assignAction(list_tables, "List all tables")
stack.pushCommand("list")
stack.assignAction(list_tables, "List all tables")
stack.pop()

def create_table(name, fields, **kw):
    introduce("Adding table %s" % name)
    t = Table(name, fields.split("|"))
    tables = db.downloadTables()
    tables.append(t)
    db.uploadTables(tables)
stack.pushCommand("new")
stack.pushVariable("name")
stack.pushVariable("fields")
stack.assignAction(create_table, "Creates new table with name and fields where each column is separated by |")

def find_table_by_name(name, tables):
    for table in tables:
        if table.getName().lower() == name.lower():
            return table
    return None

stack.pop()
stack.pop()
stack.pop()
stack.pop()

stack.pushCommand("table")
stack.pushVariable("name")
def show_table(name, **kw):
    introduce("Table: %s" % name)
    table = find_table_by_name(name, db.downloadTables())
    if table != None:
        print(table)
    else:
        print("Not found")
stack.assignAction(show_table, "Shows specified table")
stack.pushCommand("show")
stack.assignAction(show_table, "Shows specified table")

stack.pop()

def table_add_entry(name, data, **kw):
    introduce("Adding entry to table")
    tables = db.downloadTables()
    table = find_table_by_name(name, tables)
    if table != None:
        table.addEntry(data.split("|"))
        db.uploadTables(tables)
stack.pushCommand("add")
stack.pushVariable("data")
stack.assignAction(table_add_entry, "Adds entry to table, data is specified such that each field is separated by |")

stack.pop()
stack.pop()

stack.pushCommand("entry")
stack.pushVariable("entry_id")

def show_entry(name, entry_id, **kw):
    introduce("Displaying entry")
    tables = db.downloadTables()
    table = find_table_by_name(name, tables)
    if table == None:
        print("Not found")
        return 
    e = table.getEntries()[int(entry_id)-1]
    i = 0 
    for field in table.getFields():
        print("%s: %s" % (field, e[i]))
        i = i + 1
stack.assignAction(show_entry, "Show specified entry")
stack.pushCommand("show")
stack.assignAction(show_entry, "Show specified entry")
stack.pop()

def table_delete_entry(name, entry_id, **kw):
    introduce("Removing entry %s" % entry_id)
    tables = db.downloadTables()
    table = find_table_by_name(name, tables)
    if table != None:
        table.removeEntry(int(entry_id))
        db.uploadTables(tables)
stack.pushCommand("delete")
stack.assignAction(table_delete_entry, "Deletes specified entry")
stack.pop()

def table_update_entry(name, entry_id, data, **kw):
    introduce("Updating entry %s" % entry_id)
    tables = db.downloadTables()
    table = find_table_by_name(name, tables)
    if table != None:
        table.updateEntry(int(entry_id), data.split("|"))
        db.uploadTables(tables)
stack.pushCommand("update")
stack.pushVariable("data")
stack.assignAction(table_update_entry, "Updates specified entry with new data such that each field is separated by |")
stack.pop()
stack.pop()


stack.popAll()
stack.pushCommand("database")
stack.pushCommand("export")
def export_json(path, **kw):
    introduce("Exporting database to %s" % path)
    f = open(path, "w")
    f.write(json.dumps(db.toDict()))
    f.close()
stack.pushCommand("json")
stack.pushVariable("path")
stack.assignAction(export_json, "Export whole database to JSON file")
stack.pop()
stack.pop()

stack.pop()
stack.pushCommand("import")
def import_json(path, **kw):
    introduce("Importing database from %s" % path)
    f = open(path)
    db.fromDict(json.loads(f.read()))
    f.close()
stack.pushCommand("json")
stack.pushVariable("path")
stack.assignAction(import_json, "Import database contained in JSON file")
stack.pop()
stack.pop()

stack.popAll()
stack.pushCommand("help")
stack.assignAction(lambda: print(stack.getHelp()), "Get help")
stack.execute(sys.argv)
