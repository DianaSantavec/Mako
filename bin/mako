#!python


from ArgumentStack import * 
from mako.lib.schedule import * 
from mako.lib.ams import * 
from mako.lib.reporting import * 
from mako.desktop import * 

import sys
import os 
import colorama

stack = ArgumentStack()

def introduce(name):
    print("%s:" % name)
    print("_________________")

def list_projects(**kw):
    projects = db.downloadProjects()
    introduce("Projects")
    for project in projects:
        print(project.getName())

def add_project(name="", bg="", fg=""):
    introduce("Adding project %s" % name)
    projects = db.downloadProjects()
    projects.append(ScheduleProject(name, (255, 0, 0), (255,255,255)))
    db.uploadProjects(projects)

def delete_project(name="", **kw):
    introduce("Deleting project %s" % name)
    projects = db.downloadProjects()
    newprojects = [] 
    for p in projects:
        if p.getName() != name:
            newprojects.append(p)
    db.uploadProjects(newprojects)

def get_project_index(projects, name):
    k = -1 
    for i in range(len(projects)):
        if name == projects[i].getName():
            k = i
            break
    return k 

def get_subproject_index(subprojects, name):
    k = -1 
    for i in range(len(subprojects)):
        if name == subprojects[i].getName():
            k = i
            break
    return k 


def list_subprojects(project_name, **kw):
    introduce("List of subprojects for %s" % project_name)
    projects = db.downloadProjects()
    k = get_project_index(projects, project_name)
    if k == -1:
        print("Project %s not found" % project_name)
        return 
    for sp in projects[k].getSubprojects():
        print(sp.getName())

def add_subproject(project_name, name, **kw):
    introduce("Adding %s to %s" % (name, project_name))
    projects = db.downloadProjects()
    k = get_project_index(projects, project_name)
    if k == -1:
        print("Project %s not found" % project_name)
        return 
    projects[k].addSubproject(ScheduleSubproject(name))
    db.uploadProjects(projects)

def delete_subproject(project_name, name, **kw):
    introduce("Deleting %s from %s" % (name, project_name))
    projects = db.downloadProjects()
    i = get_project_index(projects, project_name)
    if i == -1:
        print("Project %s not found" % project_name)
    subprojects = projects[i].getSubprojects().copy()
    projects[i].deleteAllSubprojects()
    for sp in subprojects:
        if sp.getName() != name:
            projects[i].addSubproject(sp)
    db.uploadProjects(projects)

db = MakoDesktopDatabase("%s/.mako/db" % os.environ["HOME"])

stack.pushCommand("projects")
stack.assignAction(list_projects, "Lists all projects")
stack.pushCommand("list")
stack.assignAction(list_projects, "Lists all projects")
stack.pop()

stack.pushCommand("add")
stack.pushVariable("name")
stack.pushVariable("bg")
stack.pushVariable("fg")
stack.assignAction(add_project, "Add new projects. Colors are specified in hexadecimal manner like ffffff for white.")
stack.pop()
stack.pop()
stack.pop()
stack.pop()

stack.pushCommand("delete")
stack.pushVariable("name")
stack.pop()
stack.pop()

stack.pop()

stack.pushCommand("project")
stack.pushVariable("project_name")

stack.pushCommand("subprojects")
stack.assignAction(list_subprojects, "Lists all subprojects for a given project")
stack.pushCommand("list")
stack.assignAction(list_subprojects, "Lists all subprojects for a given project")
stack.pop()

stack.pushCommand("add")
stack.pushVariable("name")
stack.assignAction(add_subproject, "Adds new subproject into existing project")
stack.pop()
stack.pop()

stack.pushCommand("delete")
stack.pushVariable("name")
stack.assignAction(delete_subproject, "Deletes existing subproject")
stack.pop()
stack.pop()

stack.pop() # we do not use subprojects subcommands anymore 

stack.pushCommand("subproject")
stack.pushVariable("name")

def short_title(task):
    if len(task.getText()) > 30:
        return task.getText()[:30] + "..."
    return task.getText()
def list_tasks(project_name, name, **kw):
    introduce("Task list for %s -> %s" % (project_name, name))
    projects = db.downloadProjects()
    i = get_project_index(projects, project_name)
    if i == -1:
        print("Project not found")
        return 
    j = get_subproject_index(projects[i].getSubprojects(), name)
    if j == -1:
        print("Subproject not found")
        return 
    tasks = projects[i].getSubprojects()[j].getAllTasks()
    for t in tasks:
        text = short_title(t)
        color = colorama.Fore.RED
        if t.isDone():
            color = colorama.Fore.GREEN
        print("%s\t\t| %s | %s | %s %d \t %d%s" % (color, text, str(t.getDueDate()), " " * (40 - len(text)), t.getExpectedTime(), t.getSpentTime(), colorama.Style.RESET_ALL))


stack.pushCommand("tasks")
stack.assignAction(list_tasks,"List all tasks for given subproject")
stack.pushCommand("list")
stack.assignAction(list_tasks, "List all tasks for given subproject")
stack.pop()

def add_task(project_name, name, text, due, expected, **kw):
    if due == "current":
        due = datetime.datetime(datetime.datetime.now().year, datetime.datetime.now().month, 28)
    else:
        due = datetime.datetime.strptime(due, "%Y-%m-%d")
    expected = int(expected)
    introduce("Adding task to %s -> %s with description: %s, due date is %s and expected time is %d" % (project_name, name, text, datetime.datetime.strftime(due, "%Y-%m-%d"), expected))
    projects = db.downloadProjects()
    i = get_project_index(projects, project_name)
    if i == -1:
        print("Project not found")
        return
    j = get_subproject_index(projects[i].getSubprojects(), name)
    if j == -1:
        print("Subproject not found")
        return 
    projects[i].getSubprojects()[j].addTask(Task(text, expected, due=due))
    db.uploadProjects(projects)

stack.pushCommand("add")
stack.pushVariable("text")
stack.pushVariable("due")
stack.pushVariable("expected")
stack.assignAction(add_task, "Adds new task. Due date has to be specified in %Y-%m-%d format or 'current' if end of current month is needed to be. Expected time is in hours.")

stack.pop()
stack.pop()
stack.pop()
stack.pop()


def delete_task(project_name, name, text):
    introduce("Deleting task %s" % text)
    projects = db.downloadProjects()
    i = get_project_index(projects, project_name)
    if i == -1:
        print("Project not found")
        return
    j = get_subproject_index(projects[i].getSubprojects(), name)
    if j == -1:
        print("Subproject not found")
        return 
    tasks = projects[i].getSubprojects()[j].getAllTasks().copy()
    projects[i].getSubprojects()[j].deleteAllTasks()
    for task in tasks:
        if task.getText() != text:
            projects[i].getSubprojects()[j].addTask(task)
    db.uploadProjects(projects)

stack.pushCommand("delete")
stack.pushVariable("text")
stack.assignAction(delete_task, "Delete task with specified text")


stack.popAll()
stack.pushCommand("help")
stack.assignAction(lambda: print(stack.getHelp()), "Get help")
stack.execute(sys.argv)
